#!/bin/bash
# comando: bash create_tag_and_merge.sh

set -e
set -o pipefail
#set -x  # Ativa o modo debug (imprime cada linha executada)

# === Configura√ß√µes iniciais ===
BRANCH_MAIN="main"
VERSION_FILE="src/version/version.txt"
KEY_FILE="src/version/key.py"
ENV_FILE="src/version/env.py"

# === Disclaimer e confirma√ß√£o ===
echo "‚ö†Ô∏è ATEN√á√ÉO: Este script realiza opera√ß√µes cr√≠ticas no reposit√≥rio."
echo "Deseja continuar com a opera√ß√£o? (s/n)"
read PROSSEGUIR_CONFIRMADO
if [ "$PROSSEGUIR_CONFIRMADO" != "s" ]; then
  echo "üö´ Opera√ß√£o cancelada. Saindo..."
  exit 0
fi



# =====================
# === CHECKOUT MAIN ===
# =====================
git checkout $BRANCH_MAIN
git pull origin $BRANCH_MAIN
echo "VOC√ä ESTA NA BRANCH: $BRANCH_MAIN"

# === Fun√ß√£o para incrementar PATCH ===
increment_patch() {
  if [ ! -f "$VERSION_FILE" ]; then
    echo "2.0.0" > "$VERSION_FILE"
    echo "üìÑ Criado arquivo $VERSION_FILE com vers√£o inicial 2.0.0"
  fi

  VERSION=$(cat "$VERSION_FILE")

  MAJOR=$(echo "$VERSION" | cut -d. -f1)
  MINOR=$(echo "$VERSION" | cut -d. -f2)
  PATCH=$(echo "$VERSION" | cut -d. -f3)

  MAJOR=${MAJOR:-0}
  MINOR=${MINOR:-0}
  PATCH=${PATCH:-0}

  ((PATCH++))
  NEW_VERSION="$MAJOR.$MINOR.$PATCH"

  echo "$VERSION $NEW_VERSION"
}

# === Atualiza√ß√£o de vers√£o ===
read VERSION NEW_VERSION <<< "$(increment_patch)"
echo "Vers√£o atual: $VERSION"
echo "Nova sugest√£o de vers√£o: $NEW_VERSION"

#read -p "Deseja alterar a nova vers√£o $NEW_VERSION? (pressione ENTER para manter ou digite nova vers√£o): " USER_INPUT
read -e -p "Confirme a nova vers√£o sugerida com ENTER ou altere: " -i "$NEW_VERSION" USER_INPUT

if [[ -n "$USER_INPUT" ]]; then
  NEW_VERSION="$USER_INPUT"
fi

echo "üìù Vers√£o a ser usada: $NEW_VERSION"
read -p "Confirma essa vers√£o? (s/n): " CONFIRM

if [[ "$CONFIRM" != "s" && "$CONFIRM" != "S" ]]; then
  echo "üö´ Opera√ß√£o cancelada. Nenhuma altera√ß√£o feita."
  exit 1 #sai do script
fi

echo "$NEW_VERSION" > "$VERSION_FILE"
echo "üöÄ Vers√£o final definida: $NEW_VERSION"

# === Gera√ß√£o da tag ===
TAG_TIME=$(date +"%Y%m%d-%H%M")
TAG_NAME="v$NEW_VERSION-$TAG_TIME"
git tag -a "$TAG_NAME" -m "Vers√£o $NEW_VERSION gerada em $TAG_TIME"
git push origin "$TAG_NAME"
echo "‚úÖ Tag '$TAG_NAME' criada e enviada com sucesso!"

# === Atualiza Key.py ('vers√£o' usado no c√≥digo) ===
echo "APP_VERSION = \"$NEW_VERSION\"" > $KEY_FILE
echo "‚úÖ Arquivo $KEY_FILE atualizado com a nova vers√£o $NEW_VERSION"

git add $VERSION_FILE $KEY_FILE
git commit -m "üîñ Atualizado vers√£o para $NEW_VERSION"

# === Atualiza√ß√£o environment para produ√ß√£o ===
echo "ENV='production'" > $ENV_FILE
echo "‚úÖ Arquivo $ENV_FILE da $BRANCH_MAIN atualizado para produ√ß√£o"

git add $ENV_FILE
git commit -m "üîñ Atualizado env para produ√ß√£o"

# === Merge ou push ===
echo ""
echo "Deseja fazer merge de uma branch develop/hotfix para a '$BRANCH_MAIN' ou apenas fazer push da '$BRANCH_MAIN'?"
echo "Digite 'merge' para fazer o merge, ou 'push' para apenas enviar a main ao origin."
read -p "(merge/push): " ACAO

if [ "$ACAO" = "merge" ]; then
  read -p "Digite o nome da branch para fazer o merge com a '$BRANCH_MAIN': " BRANCH_HOTFIX
  if [ -z "$BRANCH_HOTFIX" ]; then
    echo "üö´ Nenhuma branch hotfix informada. Saindo..."
    exit 1
  fi

  git merge "$BRANCH_HOTFIX" || {
    echo "‚ö†Ô∏è Conflitos encontrados. Resolva manualmente."
    exit 1
  }

  git push origin $BRANCH_MAIN
  echo "‚úÖ Merge conclu√≠do com sucesso!"

elif [ "$ACAO" = "push" ]; then
  git push origin $BRANCH_MAIN
  echo "‚úÖ Push da '$BRANCH_MAIN' conclu√≠do com sucesso!"
else
  echo "üö´ Op√ß√£o inv√°lida."
  exit 1
fi